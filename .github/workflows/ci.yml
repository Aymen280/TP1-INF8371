name: CI with Gradle (Build, Test & SonarQube)

on:
  push:
    branches:
      - master
      - Feature/add-pipeline
  pull_request:
    branches:
      - master
      - Feature/add-pipeline

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

  launch-sonarqube:
    name: Launch SonarQube
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Rebuild the Project
        run: ./gradlew build -x test --stacktrace

      - name: Run SonarQube Analysis
        run: |
          ./gradlew sonarqube --stacktrace \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=Damaris000 \
            -Dsonar.projectKey=Damaris000_TP1-INF8371 \
            -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/build/**,**/*.test.js,**/*.spec.js,**/*.java"

      - name: Attendre SonarCloud
        run: sleep 30 

      - name: V√©rifier la Complexit√© Cyclomatique
        run: |
          PROJECT_KEY="Damaris000_TP1-INF8371"

          echo "üîç V√©rification de la complexit√© pour le projet : $PROJECT_KEY"

          RESPONSE=$(curl -s "https://sonarcloud.io/api/measures/component?component=${PROJECT_KEY}&metricKeys=complexity" \
            -H "Authorization: Bearer ${{ secrets.SONAR_TOKEN }}")

          echo "üîç R√©ponse brute de SonarCloud : $RESPONSE"

          COMPLEXITY=$(echo "$RESPONSE" | jq -r '.component.measures[0].value')

          if [[ -z "$COMPLEXITY" || "$COMPLEXITY" == "null" ]]; then
            echo "‚ö†Ô∏è ERREUR : Impossible de r√©cup√©rer la complexit√©, valeur vide ou invalide !"
            exit 1
          fi

          echo "üìä Complexit√© d√©tect√©e : $COMPLEXITY"

          if [[ "$COMPLEXITY" -gt 500 ]]; then
            echo "üö® ERREUR: Complexit√© trop √©lev√©e !"
            exit 1
          fi

      - name: Display SonarQube Logs
        run: cat build/sonar/logs/sonar.log || echo "No logs found!"
